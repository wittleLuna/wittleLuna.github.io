<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minimum Spanning Tree  on wittleLuna&#39;s blog</title>
    <link>http://localhost:1313/en/tags/minimum-spanning-tree-/</link>
    <description>Recent content from wittleLuna&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    
    <managingEditor>syaz23277@gmail.com (wittleLuna)</managingEditor>
    <webMaster>syaz23277@gmail.com (wittleLuna)</webMaster>
    
    <copyright>All articles on this blog are licensed under the BY-NC-SA license agreement unless otherwise stated. Please indicate the source when reprinting!</copyright>
    
    <lastBuildDate>Thu, 12 Jun 2025 00:00:00 +0000</lastBuildDate>
    
    
    <atom:link href="http://localhost:1313/en/tags/minimum-spanning-tree-/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>Minimum Spanning Tree</title>
      <link>http://localhost:1313/en/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95prim-kruskal/</link>
      <pubDate>Thu, 12 Jun 2025 00:00:00 &#43;0000</pubDate>
      <author>syaz23277@gmail.com (wittleLuna)</author>
      <guid>http://localhost:1313/en/post/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95prim-kruskal/</guid>
      <description>
        <![CDATA[<h1>Minimum Spanning Tree</h1><p>Author: wittleLuna(syaz23277@gmail.com)</p>
        
          <p><strong>最小生成树是所有节点的最小连通子图</strong>，<strong>即：以最小的成本（边的权值）将图中所有节点链接到一起。</strong></p>
<h2 id="prim算法">
<a class="header-anchor" href="#prim%e7%ae%97%e6%b3%95"></a>
prim算法
</h2><p>图中有n个节点，那么一定可以用n-1条边将所有节点连接到一起。</p>
<p>==<strong>只适用于加权无向图</strong>==</p>
<p>那么如何选择这n-1条边就是最小生成树算法的任务所在。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20231206164306.png" alt="image"></p>
<p>在这个图中，如何选取n-1条边使得图中所有节点连接到一起，并且边的权值和最小呢？</p>
<p>（图中为n为7，即7个节点，那么只需要n-1即6条边就可以讲所有顶点连接到一起）</p>
<p>prim算法是从节点的角度<strong>采用贪心的策略每次寻找距离最小生成树最近的节点并加入到最小生成树中。</strong></p>
<p>prim算法核心就是三步，我称为<strong>prim三部曲</strong>，大家一定要熟悉这三步，代码相对会好些很多：</p>
<ul>
<li>第一步，选距离生成树最近节点</li>
<li>第二步，最近节点加入生成树</li>
<li>第三步，更新非生成树节点到生成树的距离（即更新minDist数组）</li>
</ul>
<p><strong>minDist数组的含义：记录每一个节点距离最小生成树的最近距离。</strong></p>
<p><a href="https://programmercarl.com/kamacoder/0053.%E5%AF%BB%E5%AE%9D-prim.html#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF">最小生成树prim算法</a></p>
<h2 id="寻宝">
<a class="header-anchor" href="#%e5%af%bb%e5%ae%9d"></a>
寻宝
</h2><blockquote>
<p>在世界的某个区域，有一些分散的神秘岛屿，每个岛屿上都有一种珍稀的资源或者宝藏。国王打算在这些岛屿上建公路，方便运输。</p>
<p>不同岛屿之间，路途距离不同，国王希望你可以规划建公路的方案，如何可以以最短的总公路距离将 所有岛屿联通起来（注意：这是一个无向图）。</p>
<p>给定一张地图，其中包括了所有的岛屿，以及它们之间的距离。以最小化公路建设长度，确保可以链接到所有岛屿。</p>
<p>输入描述
第一行包含两个整数V 和 E，V代表顶点数，E代表边数 。顶点编号是从1到V。例如：V=2，一个有两个顶点，分别是1和2。</p>
<p>接下来共有 E 行，每行三个整数 v1，v2 和 val，v1 和 v2 为边的起点和终点，val代表边的权值。</p>
<p>输出描述
输出联通所有岛屿的最小路径总距离
输入示例
7 11
1 2 1
1 3 1
1 5 2
2 6 1
2 4 2
2 3 2
3 4 1
4 5 1
5 6 2
5 7 1
6 7 1
输出示例
6
提示信息
数据范围：
2 &lt;= V &lt;= 10000;
1 &lt;= E &lt;= 100000;
0 &lt;= val &lt;= 10000;</p>
        
        <hr><p>Published on 2025-06-12 at <a href='http://localhost:1313/'>wittleLuna's blog</a>, last modified on 2025-06-12</p>]]>
      </description>
      
        <category>算法</category>
      
    </item>
    
  </channel>
</rss>
