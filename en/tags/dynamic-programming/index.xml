<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Programming on wittleLuna&#39;s blog</title>
    <link>https://wittleLuna.github.io/en/tags/dynamic-programming/</link>
    <description>Recent content from wittleLuna&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    
    <managingEditor>syaz23277@gmail.com (wittleLuna)</managingEditor>
    <webMaster>syaz23277@gmail.com (wittleLuna)</webMaster>
    
    <copyright>All articles on this blog are licensed under the BY-NC-SA license agreement unless otherwise stated. Please indicate the source when reprinting!</copyright>
    
    <lastBuildDate>Sun, 15 Jun 2025 14:38:58 +0800</lastBuildDate>
    
    
    <atom:link href="https://wittleLuna.github.io/en/tags/dynamic-programming/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>dynamic programming</title>
      <link>https://wittleLuna.github.io/en/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 &#43;0000</pubDate>
      <author>syaz23277@gmail.com (wittleLuna)</author>
      <guid>https://wittleLuna.github.io/en/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>
        <![CDATA[<h1>dynamic programming</h1><p>Author: wittleLuna(syaz23277@gmail.com)</p>
        
          <h2 id="动规五部曲">
<a class="header-anchor" href="#%e5%8a%a8%e8%a7%84%e4%ba%94%e9%83%a8%e6%9b%b2"></a>
动规五部曲
</h2><ol>
<li>确定dp数组和下标的含义</li>
<li>写出递推公式</li>
<li>确定dp数组如何初始化</li>
<li>确定遍历顺序（方向）</li>
<li>打印，举例推导验证dp数组是否正确</li>
</ol>
<h2 id="背包问题">
<a class="header-anchor" href="#%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98"></a>
背包问题
</h2><h2 id="01背包">
<a class="header-anchor" href="#01%e8%83%8c%e5%8c%85"></a>
01背包
</h2><ul>
<li>可使用二维背包，一维滚动背包</li>
</ul>
<h3 id="二维背包">
<a class="header-anchor" href="#%e4%ba%8c%e7%bb%b4%e8%83%8c%e5%8c%85"></a>
二维背包
</h3><h4 id="基本了解">
<a class="header-anchor" href="#%e5%9f%ba%e6%9c%ac%e4%ba%86%e8%a7%a3"></a>
基本了解
</h4><ul>
<li>
<p>基本递推公式 : <code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i])</code></p>
</li>
<li>
<p>dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少</p>
</li>
<li>
<p>遍历顺序一般是先物品，再背包。也可以先背包，再物品</p>
</li>
<li>
<p>第一列初始化为0，第一行为第一个物品能否装入的价值</p>
</li>
<li>
<p>dp的方向是由左上方决定的，遍历顺序从前往后/从后往前都可以</p>
</li>
</ul>
<h3 id="一维背包滚动背包">
<a class="header-anchor" href="#%e4%b8%80%e7%bb%b4%e8%83%8c%e5%8c%85%e6%bb%9a%e5%8a%a8%e8%83%8c%e5%8c%85"></a>
一维背包/滚动背包
</h3><ul>
<li>基本递推公式 : <code>dp[j] = max(dp[j],dp[j - weight[i]] + value[i])</code></li>
<li>需要先遍历物品，再遍历背包，遍历背包时要倒序遍历</li>
<li>初始化为0</li>
<li>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]</li>
</ul>
<h4 id="为什么背包容量循环需要倒序">
<a class="header-anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%83%8c%e5%8c%85%e5%ae%b9%e9%87%8f%e5%be%aa%e7%8e%af%e9%9c%80%e8%a6%81%e5%80%92%e5%ba%8f"></a>
为什么背包容量循环需要倒序：
</h4><p><code>dp[j - weight[i]] + value[i]</code> : 说明是从左边的值来寻找当前合适的值</p>
<p>如果倒序，此时j从大到小，从左边：左边初始化都为0，所以不会使用到已经用过的物品</p>
<p>如果顺序，此时j从小到大，从左边：假如已经填了第一个物品，那么第二次，查找左边，就会继续把第一个物品的值加上</p>
<h3 id="题型类型">
<a class="header-anchor" href="#%e9%a2%98%e5%9e%8b%e7%b1%bb%e5%9e%8b"></a>
题型类型
</h3><p>1.纯01背包，计算背包装满的最大价值</p>
<p>2.能否填满背包（一般背包容量也可以是指定数字，数组里的数作为元素，能否达到指定数字）</p>
<ul>
<li>不同点：返回值是和需要的容量作比较后的布尔值</li>
</ul>
<p>3.尽量填满背包</p>
<p>4.填满背包的方法数量</p>
<ul>
<li>
<p>不同点 ：</p>
<p>1.递推公式不同: 总填充方法 =  不要该物品的填充方法+空出该物品容量，要该物品的填充方法，以及分支条件，如果装不下该物品，采用之前的填充方法数</p>
<p>dp[j] += dp[j - weight[i]]</p>
        
        <hr><p>Published on 2025-06-14 at <a href='https://wittleLuna.github.io/'>wittleLuna's blog</a>, last modified on 2025-06-15</p>]]>
      </description>
      
        <category>computer algorithm</category>
      
    </item>
    
  </channel>
</rss>
