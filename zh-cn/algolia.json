[
  {
    "objectID": "1749600000",
    "permalink": "/zh-cn/post/greedy-algorithm/",
    "title": "贪心算法","content": " 数组 数组的初始化 静态初始化：初始化时指定数组的元素，系统根据元素的个数决定数组的长度 //数据类型 [] 数组名 = new 数据类型 [] {元素1，元素2，....} 可以简写为： //数据类型 [] 数组名 = {元素1，元素2，....} 动态初始化：初始化时只指定长度，不指定数值 ，由虚拟机给出默认的初始化值\n//数据类型 [] 数组名 = new 数据类型 [数组的长度] {元素1，元素2，....} 二维数组 使用场景：把数据分组管理\n二维数组的初始化 二维数组的静态初始化： 数据类型[] [] 数组名 = new 数据类型[] [] {{元素1，元素2},{元素1，元素2}} 简写： 数据类型[] [] 数组名 = {{元素1，元素2},{元素1，元素2}} 建议的写法： int[][] arr = { {1,2,3}, {4,5,6,7} } 二维数组的动态初始化： 数据类型[] [] 数组名 = new 数据类型[m] [n] m表示二维数组的长度，能放多少个一维数组 n表示一维数组的长度，能放多少个元素 二维数组的内存图 二维数组里储存的是一维数组的地址。\n数组的内存图 int[] arr中，arr存储的是指向堆中创建的数组的地址值\nJava内存分配 栈： 方法运行时使用的内存\n栈内存的更新速度很快，因为局部变量的生命周期很短。 储存局部变量 堆： 存储对象或数组，new创建的对象，都存储在堆里\n对象：实体（封装数据，可以封装多个） 堆中的实体不会被随时释放 堆中的每个对象都有地址 GC(garbage collection)垃圾回收器（程序），触发时间不一定 堆中的每一个实体的变量都有默认的初始值，栈中的没有 方法区 存储可以运行的class文件（调用字节码文件，方法临时存储）\n本地方法栈 JVM在使用操作系统功能时使用，和开发无关，不同的系统下调用不同的操作系统的内容\nJVM：( java virtual machine) java虚拟机， JVM屏蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。 寄存器 给CPU使用，和操作无关\n方法 方法是程序中最小的执行单元\n方法的内存图 方法调用的基本内存原理：存储在栈里，先进后出\n方法传递基本数据类型的内存 …","date": "2025-06-11 00:00:00",
    "updated": "2025-06-11 00:00:00"
  }]